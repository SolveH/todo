{"remainingRequest":"/Users/malfha/Documents/git/todo/node_modules/babel-loader/lib/index.js!/Users/malfha/Documents/git/todo/node_modules/eslint-loader/index.js??ref--13-0!/Users/malfha/Documents/git/todo/src/shared/data.service.js","dependencies":[{"path":"/Users/malfha/Documents/git/todo/src/shared/data.service.js","mtime":1597906031265},{"path":"/Users/malfha/Documents/git/todo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/malfha/Documents/git/todo/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/malfha/Documents/git/todo/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL21hbGZoYS9Eb2N1bWVudHMvZ2l0L3RvZG8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9tYWxmaGEvRG9jdW1lbnRzL2dpdC90b2RvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICogYXMgYXhpb3MgZnJvbSAiYXhpb3MiOwoKdmFyIGdldFRvZG9zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgIHZhciByZXM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiaHR0cDovL2xvY2FsaG9zdDo4ODg4L3RvZG9zIik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBwYXJzZUxpc3QocmVzKSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQudDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBbXSk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDddXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZ2V0VG9kb3MoKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBnZXRUb2RvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGlkKSB7CiAgICB2YXIgcmVzLCB0b2RvOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoImh0dHA6Ly9sb2NhbGhvc3Q6ODg4OC90b2Rvcy8iLmNvbmNhdChpZCkpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHRvZG8gPSBwYXJzZUl0ZW0ocmVzLCAyMDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgdG9kbyk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDg7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyLnQwKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDhdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZ2V0VG9kbyhfeCkgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIGFkZFRvZG8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTModG9kbykgewogICAgdmFyIHJlcywgYWRkZWRUb2RvOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCJodHRwOi8vbG9jYWxob3N0Ojg4ODgvdG9kb3MvIiwgdG9kbyk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgYWRkZWRUb2RvID0gcGFyc2VJdGVtKHJlcywgMjAxKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIGFkZGVkVG9kbyk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDg7CiAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzLnQwKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzAsIDhdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gYWRkVG9kbyhfeDIpIHsKICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBkZWxldGVUb2RvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHRvZG8pIHsKICAgIHZhciByZXM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmRlbGV0ZSgiaHR0cDovL2xvY2FsaG9zdDo4ODg4L3RvZG9zLyIuY29uY2F0KHRvZG8uaWQpKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICBwYXJzZUl0ZW0ocmVzLCAyMDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgdG9kby5pZCk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDg7CiAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQ0LnQwKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU0LCBudWxsLCBbWzAsIDhdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZGVsZXRlVG9kbyhfeDMpIHsKICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBlZGl0VG9kbyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY1ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSh0b2RvKSB7CiAgICB2YXIgcmVzLCBlZGl0ZWRUb2RvOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5wdXQoImh0dHA6Ly9sb2NhbGhvc3Q6ODg4OC90b2Rvcy8iLmNvbmNhdCh0b2RvLmlkKSwgdG9kbyk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXMgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgZWRpdGVkVG9kbyA9IHBhcnNlSXRlbShyZXMsIDIwMCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCBlZGl0ZWRUb2RvKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIF9jb250ZXh0NS5wcmV2ID0gODsKICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1WyJjYXRjaCJdKDApOwogICAgICAgICAgICBjb25zb2xlLmxvZyhfY29udGV4dDUudDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTUsIG51bGwsIFtbMCwgOF1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBlZGl0VG9kbyhfeDQpIHsKICAgIHJldHVybiBfcmVmNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsgLy9QYXJzZSByZXNwb25zZSBmdW5jdGlvbnMKCgp2YXIgcGFyc2VMaXN0ID0gZnVuY3Rpb24gcGFyc2VMaXN0KHJlc3BvbnNlKSB7CiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB0aHJvdyBFcnJvcihyZXNwb25zZS5tZXNzYWdlKTsKICBpZiAoIXJlc3BvbnNlLmRhdGEpIHJldHVybiBbXTsKICB2YXIgbGlzdCA9IHJlc3BvbnNlLmRhdGE7CgogIGlmIChfdHlwZW9mKGxpc3QpICE9PSAib2JqZWN0IikgewogICAgbGlzdCA9IFtdOwogIH0KCiAgcmV0dXJuIGxpc3Q7Cn07Cgp2YXIgcGFyc2VJdGVtID0gZnVuY3Rpb24gcGFyc2VJdGVtKHJlc3BvbnNlLCBjb2RlKSB7CiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gY29kZSkgdGhyb3cgRXJyb3IocmVzcG9uc2UubWVzc2FnZSk7CiAgdmFyIGl0ZW0gPSByZXNwb25zZS5kYXRhOwoKICBpZiAoX3R5cGVvZihpdGVtKSAhPT0gIm9iamVjdCIpIHsKICAgIGl0ZW0gPSB1bmRlZmluZWQ7CiAgfQoKICByZXR1cm4gaXRlbTsKfTsKCmV4cG9ydCB2YXIgZGF0YVNlcnZpY2UgPSB7CiAgZ2V0VG9kb3M6IGdldFRvZG9zLAogIGdldFRvZG86IGdldFRvZG8sCiAgYWRkVG9kbzogYWRkVG9kbywKICBkZWxldGVUb2RvOiBkZWxldGVUb2RvLAogIGVkaXRUb2RvOiBlZGl0VG9kbwp9Ow=="},{"version":3,"sources":["/Users/malfha/Documents/git/todo/src/shared/data.service.js"],"names":["axios","getTodos","get","res","parseList","console","log","getTodo","id","todo","parseItem","addTodo","post","addedTodo","deleteTodo","delete","editTodo","put","editedTodo","response","status","Error","message","data","list","code","item","undefined","dataService"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst getTodos = async function() {\n  try {\n    const res = await axios.get(\"http://localhost:8888/todos\");\n    return parseList(res);\n  } catch (e) {\n    console.log(e);\n    return [];\n  }\n};\n\nconst getTodo = async function(id) {\n  try {\n    const res = await axios.get(`http://localhost:8888/todos/${id}`);\n    let todo = parseItem(res, 200);\n    return todo;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\nconst addTodo = async function(todo) {\n  try {\n    const res = await axios.post(\"http://localhost:8888/todos/\", todo);\n    const addedTodo = parseItem(res, 201);\n    return addedTodo;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\nconst deleteTodo = async function(todo) {\n  try {\n    const res = await axios.delete(`http://localhost:8888/todos/${todo.id}`);\n    parseItem(res, 200);\n    return todo.id;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nconst editTodo = async function(todo) {\n  try {\n    const res = await axios.put(`http://localhost:8888/todos/${todo.id}`, todo);\n    const editedTodo = parseItem(res, 200);\n    return editedTodo;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\n//Parse response functions\n\nconst parseList = (response) => {\n  if (response.status !== 200) throw Error(response.message);\n  if (!response.data) return [];\n  let list = response.data;\n  if (typeof list !== \"object\") {\n    list = [];\n  }\n  return list;\n};\n\nconst parseItem = (response, code) => {\n  if (response.status !== code) throw Error(response.message);\n  let item = response.data;\n  if (typeof item !== \"object\") {\n    item = undefined;\n  }\n  return item;\n};\n\nexport const dataService = {\n  getTodos,\n  getTodo,\n  addTodo,\n  deleteTodo,\n  editTodo,\n};\n"]}]}